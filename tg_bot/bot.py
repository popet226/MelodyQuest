from dotenv import load_dotenv
import django
import os
import telebot
import sys
import logging
import time
from telebot import types 
from threading import Thread

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

logger.info("–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –±–æ—Ç–∞")

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(BASE_DIR)
logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –≤ sys.path: {BASE_DIR}")

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'music_searcher.settings')
logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω DJANGO_SETTINGS_MODULE")

logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django")
django.setup()
logger.info("Django —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

from searcher.views import search_song
logger.info("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è search_song")

load_dotenv()
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")


TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    sys.exit(1)
logger.info("–ü–æ–ª—É—á–µ–Ω TELEGRAM_BOT_TOKEN")

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")

chat_states = {}
user_progress = {}

def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('üéµ –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É'),
        types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'),
        types.KeyboardButton('üö´ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')
    )
    return markup

def show_welcome(message):
    welcome = """
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MelodyQuest!</b> üéâ

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏ —Å–∫–∞—á–∞—Ç—å –ª—é–±—É—é –º—É–∑—ã–∫—É. –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
üéµ –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
‚ùì –ü–æ–º–æ—â—å - –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º
üö´ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å - –≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–Ω–æ–ø–∫–∏ <b>"üéµ –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É"</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞!
"""
    bot.send_message(
        message.chat.id,
        welcome,
        parse_mode='HTML',
        reply_markup=create_main_keyboard()
    )

def update_progress(chat_id, progress, message_id=None):
    icons = ['üïõ', 'üïê', 'üïë', 'üïí', 'üïì', 'üïî', 'üïï', 'üïñ', 'üïó', 'üïò', 'üïô', 'üïö']
    text = f"{icons[progress % len(icons)]} –ò—â–µ–º –º—É–∑—ã–∫—É... "
    
    try:
        if message_id:
            bot.edit_message_text(
                text,
                chat_id=chat_id,
                message_id=message_id
            )
        else:
            msg = bot.send_message(chat_id, text)
            return msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

@bot.message_handler(commands=['start'])
def start_command(message):
    chat_id = message.chat.id
    if chat_id not in chat_states or not chat_states[chat_id]:
        show_welcome(message)
        chat_states[chat_id] = True
    else:
        bot.reply_to(message, '‚úÖ –ë–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é!')


@bot.message_handler(commands=['help', 'about'])
@bot.message_handler(func=lambda message: message.text in ['‚ùì –ü–æ–º–æ—â—å', '–ü–æ–º–æ—â—å'])
def help_command(message):
    help_text = """
<b>üéß –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>

1. –ù–∞–∂–º–∏—Ç–µ <b>"üéµ –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É"</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /search
2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
4. –°–∫–∞—á–∞–π—Ç–µ –º—É–∑—ã–∫—É –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ

<b>üîç –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
- –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
- –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ

<b>üìå –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:</b>
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
- –ï—Å–ª–∏ —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
"""
    bot.send_message(
        message.chat.id,
        help_text,
        parse_mode='HTML',
        reply_markup=create_main_keyboard()
    )

@bot.message_handler(commands=['stop'])
@bot.message_handler(func=lambda message: message.text in ['üö´ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'])
def stop_command(message):
    chat_id = message.chat.id
    if chat_id in chat_states and chat_states[chat_id]:
        bot.send_message(
            message.chat.id,
            'üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /start',
            reply_markup=types.ReplyKeyboardRemove()
        )
        chat_states[chat_id] = False
    else:
        bot.reply_to(message, '‚ÑπÔ∏è –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞.')

@bot.message_handler(commands=['search'])
@bot.message_handler(func=lambda message: message.text in ['üéµ –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É', '–ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É'])
def search_command(message):
    chat_id = message.chat.id
    if chat_id in chat_states and chat_states[chat_id]:
        msg = bot.send_message(
            message.chat.id,
            'üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:',
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(msg, process_search_query)
    else:
        bot.reply_to(message, '‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞.')

def send_message_safe(chat_id, text, parse_mode=None):
    max_length = 4096  # –õ–∏–º–∏—Ç Telegram
    if len(text) <= max_length:
        try:
            bot.send_message(chat_id, text, parse_mode=parse_mode, disable_web_page_preview=True)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:100]}...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:

        lines = text.split('\n')
        current_message = ""
        for line in lines:
            if len(current_message) + len(line) + 1 <= max_length:
                current_message += line + '\n'
            else:
                if current_message:
                    try:
                        bot.send_message(chat_id, current_message, parse_mode=parse_mode, disable_web_page_preview=True)
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {current_message[:100]}...")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                current_message = line + '\n'
        if current_message:
            try:
                bot.send_message(chat_id, current_message, parse_mode=parse_mode, disable_web_page_preview=True)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {current_message[:100]}...")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def process_search_query(message):
    chat_id = message.chat.id
    if chat_id in chat_states and chat_states[chat_id]:
        song_name = message.text.strip()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –ø–µ—Å–Ω–∏: {song_name}")
        # bot.send_message(message.chat.id, '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')

    progress_msg_id = update_progress(message.chat.id, 0)
    user_progress[message.chat.id] = {'progress': 0, 'msg_id': progress_msg_id}
    
    def update_progress_thread():
        for i in range(1, 1000):
            time.sleep(1)
            if message.chat.id in user_progress:
                user_progress[message.chat.id]['progress'] = i
                update_progress(message.chat.id, i, user_progress[message.chat.id]['msg_id'])
    
    Thread(target=update_progress_thread).start()

    results = search_song(song_name)

    if message.chat.id in user_progress:
        try:
            bot.delete_message(message.chat.id, user_progress[message.chat.id]['msg_id'])
        except:
            pass
        del user_progress[message.chat.id]
        
    if results:
        response = "üé∂ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b>\n\n"
        for idx, (link, file_size) in enumerate(results[:5], 1):
            size_mb = file_size / 1024 / 1024 if file_size != float('inf') else "?"
            size_str = f"{size_mb:.1f}MB" if isinstance(size_mb, float) else f"{size_mb}MB"
                
            response = (
                f"{idx}. <b>–°–∫–∞—á–∞—Ç—å</b> [{size_str}]:\n"
                f"   üîä <a href='{link}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ</a>\n"
                )

            send_message_safe(
                message.chat.id,
                response,
                parse_mode='HTML',
            )
            
        response = """
üì• <b>–ö–∞–∫ —Å–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É:</b>

<u><b>‚ö†Ô∏è –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–¥–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN —Å–µ—Ä–≤–∏—Å—ã </b></u>
<u>–ù–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ:</u>
1. –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ 
2. –ù–∞–∂–º–∏—Ç–µ <i>Ctrl+S</i> (Windows/Linux) –∏–ª–∏ <i>Cmd+S</i> (Mac)
3. "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫..." (.m4a)

<u>–ù–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ:</u>
üì± <b>Android:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä Chrome
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "‚ãÆ" ‚Üí "–°–∫–∞—á–∞—Ç—å"
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "Download Manager" (Google Play).

üçè <b>iPhone:</b>
‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –≤ Safari
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" ‚Üí "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –§–∞–π–ª—ã"

üîß <i>–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–∫–∞—á–∞—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫.</i>
"""

        bot.send_message(
            message.chat.id,
            response,
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_markup=create_main_keyboard()
        )
    else:
        bot.send_message(
            message.chat.id,
            "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
            reply_markup=create_main_keyboard()
        )


def run_bot():
    logger.info("–ó–∞–ø—É—Å–∫ polling")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
        raise

if __name__ == "__main__":
    logger.info("–°—Ç–∞—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    run_bot()